[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SentimentIntensityAnalyzer",
        "importPath": "nltk.sentiment",
        "description": "nltk.sentiment",
        "isExtraImport": true,
        "detail": "nltk.sentiment",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "django.conf.urls.static",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.views.generic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "server.djangoapp.microservices.app",
        "description": "server.djangoapp.microservices.app",
        "peekOfCode": "def home():\n    return \"Welcome to the Sentiment Analyzer. \\\n    Use /analyze/text to get the sentiment\"\n@app.get('/analyze/<input_txt>')\ndef analyze_sentiment(input_txt):\n    scores = sia.polarity_scores(input_txt)\n    print(scores)\n    pos = float(scores['pos'])\n    neg = float(scores['neg'])\n    neu = float(scores['neu'])",
        "detail": "server.djangoapp.microservices.app",
        "documentation": {}
    },
    {
        "label": "analyze_sentiment",
        "kind": 2,
        "importPath": "server.djangoapp.microservices.app",
        "description": "server.djangoapp.microservices.app",
        "peekOfCode": "def analyze_sentiment(input_txt):\n    scores = sia.polarity_scores(input_txt)\n    print(scores)\n    pos = float(scores['pos'])\n    neg = float(scores['neg'])\n    neu = float(scores['neu'])\n    res = \"positive\"\n    print(\"pos neg nue \", pos, neg, neu)\n    if (neg > pos and neg > neu):\n        res = \"negative\"",
        "detail": "server.djangoapp.microservices.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server.djangoapp.microservices.app",
        "description": "server.djangoapp.microservices.app",
        "peekOfCode": "app = Flask(\"Sentiment Analyzer\")\nsia = SentimentIntensityAnalyzer()\n@app.get('/')\ndef home():\n    return \"Welcome to the Sentiment Analyzer. \\\n    Use /analyze/text to get the sentiment\"\n@app.get('/analyze/<input_txt>')\ndef analyze_sentiment(input_txt):\n    scores = sia.polarity_scores(input_txt)\n    print(scores)",
        "detail": "server.djangoapp.microservices.app",
        "documentation": {}
    },
    {
        "label": "sia",
        "kind": 5,
        "importPath": "server.djangoapp.microservices.app",
        "description": "server.djangoapp.microservices.app",
        "peekOfCode": "sia = SentimentIntensityAnalyzer()\n@app.get('/')\ndef home():\n    return \"Welcome to the Sentiment Analyzer. \\\n    Use /analyze/text to get the sentiment\"\n@app.get('/analyze/<input_txt>')\ndef analyze_sentiment(input_txt):\n    scores = sia.polarity_scores(input_txt)\n    print(scores)\n    pos = float(scores['pos'])",
        "detail": "server.djangoapp.microservices.app",
        "documentation": {}
    },
    {
        "label": "DjangoappConfig",
        "kind": 6,
        "importPath": "server.djangoapp.apps",
        "description": "server.djangoapp.apps",
        "peekOfCode": "class DjangoappConfig(AppConfig):\n    name = 'djangoapp'",
        "detail": "server.djangoapp.apps",
        "documentation": {}
    },
    {
        "label": "CarMake",
        "kind": 6,
        "importPath": "server.djangoapp.models",
        "description": "server.djangoapp.models",
        "peekOfCode": "class CarMake(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    def __str__(self):\n        return self.name\n# <HINT> Create a Car Model model `class CarModel(models.Model):`:\n# - Many-To-One relationship to Car Make model (One Car Make has many\n# Car Models, using ForeignKey field)\n# - Name\n# - Type (CharField with a choices argument to provide limited choices",
        "detail": "server.djangoapp.models",
        "documentation": {}
    },
    {
        "label": "CarModel",
        "kind": 6,
        "importPath": "server.djangoapp.models",
        "description": "server.djangoapp.models",
        "peekOfCode": "class CarModel(models.Model):\n    car_make = models.ForeignKey(CarMake, on_delete=models.CASCADE)\n    dealer_id = models.IntegerField(default=0)\n    name = models.CharField( max_length=50)\n    CAR_TYPES = [\n        ('SEDAN', 'Sedan'),\n            ('SUV', 'SUV'),\n            ('WAGON', 'Wagon'),\n            ('SPORT', 'Sport'),\n            ('OTHER', 'Other')",
        "detail": "server.djangoapp.models",
        "documentation": {}
    },
    {
        "label": "initiate",
        "kind": 2,
        "importPath": "server.djangoapp.populate",
        "description": "server.djangoapp.populate",
        "peekOfCode": "def initiate():\n    car_make_data = [\n        {\"name\":\"NISSAN\", \"description\":\"Great cars. Japanese technology\"},\n        {\"name\":\"Mercedes\", \"description\":\"Great cars. German technology\"},\n        {\"name\":\"Audi\", \"description\":\"Great cars. German technology\"},\n        {\"name\":\"Kia\", \"description\":\"Great cars. Korean technology\"},\n        {\"name\":\"Toyota\", \"description\":\"Great cars. Japanese technology\"},\n    ]\n    car_make_instances = []\n    for data in car_make_data:",
        "detail": "server.djangoapp.populate",
        "documentation": {}
    },
    {
        "label": "get_request",
        "kind": 2,
        "importPath": "server.djangoapp.restapis",
        "description": "server.djangoapp.restapis",
        "peekOfCode": "def get_request(endpoint, **kwargs):\n    params = \"\"\n    if(kwargs):\n        for key,value in kwargs.items():\n            params=params+key+\"=\"+value+\"&\"\n    request_url = backend_url+endpoint+\"?\"+params\n    print(\"GET from {} \".format(request_url))\n    try:\n        # Call get method of requests library with URL and parameters\n        response = requests.get(request_url)",
        "detail": "server.djangoapp.restapis",
        "documentation": {}
    },
    {
        "label": "analyze_review_sentiments",
        "kind": 2,
        "importPath": "server.djangoapp.restapis",
        "description": "server.djangoapp.restapis",
        "peekOfCode": "def analyze_review_sentiments(text):\n    request_url = sentiment_analyzer_url+\"analyze/\"+text\n    print(\"GET from {} \".format(request_url))\n    try:\n        # Call get method of requests library with URL and parameters\n        response = requests.get(request_url)\n        return response.json()\n    except Exception as err:\n        print(f\"Unexpected {err=}, {type(err)=}\")\n        print(\"Network exception occurred\")",
        "detail": "server.djangoapp.restapis",
        "documentation": {}
    },
    {
        "label": "post_review",
        "kind": 2,
        "importPath": "server.djangoapp.restapis",
        "description": "server.djangoapp.restapis",
        "peekOfCode": "def post_review(data_dict):\n    request_url = backend_url+\"/insert_review\"\n    try:\n        response = requests.post(request_url,json=data_dict)\n        print(response.json())\n        return response.json()\n    except:\n        print(\"Network exception occurred\")",
        "detail": "server.djangoapp.restapis",
        "documentation": {}
    },
    {
        "label": "backend_url",
        "kind": 5,
        "importPath": "server.djangoapp.restapis",
        "description": "server.djangoapp.restapis",
        "peekOfCode": "backend_url = os.getenv(\n    'backend_url', default=\"http://localhost:3030\")\nsentiment_analyzer_url = os.getenv(\n    'sentiment_analyzer_url',\n    default=\"http://localhost:5050/\")\n# def get_request(endpoint, **kwargs):\n# Add code for get requests to back end\ndef get_request(endpoint, **kwargs):\n    params = \"\"\n    if(kwargs):",
        "detail": "server.djangoapp.restapis",
        "documentation": {}
    },
    {
        "label": "sentiment_analyzer_url",
        "kind": 5,
        "importPath": "server.djangoapp.restapis",
        "description": "server.djangoapp.restapis",
        "peekOfCode": "sentiment_analyzer_url = os.getenv(\n    'sentiment_analyzer_url',\n    default=\"http://localhost:5050/\")\n# def get_request(endpoint, **kwargs):\n# Add code for get requests to back end\ndef get_request(endpoint, **kwargs):\n    params = \"\"\n    if(kwargs):\n        for key,value in kwargs.items():\n            params=params+key+\"=\"+value+\"&\"",
        "detail": "server.djangoapp.restapis",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "server.djangoapp.urls",
        "description": "server.djangoapp.urls",
        "peekOfCode": "app_name = 'djangoapp'\nurlpatterns = [\n    # # path for registration\n    # path for login\n    path(route='login', view=views.login_user, name='login'),\n    path(route='logout', view=views.logout_request, name='logout'),\n    path(route='get_cars', view=views.get_cars, name ='getcars'),\n    # path for dealer reviews view\n    path(route='get_dealers', view=views.get_dealerships, name='get_dealers'),\n    path(route='get_dealers/<str:state>', view=views.get_dealerships, name='get_dealers_by_state'),",
        "detail": "server.djangoapp.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.djangoapp.urls",
        "description": "server.djangoapp.urls",
        "peekOfCode": "urlpatterns = [\n    # # path for registration\n    # path for login\n    path(route='login', view=views.login_user, name='login'),\n    path(route='logout', view=views.logout_request, name='logout'),\n    path(route='get_cars', view=views.get_cars, name ='getcars'),\n    # path for dealer reviews view\n    path(route='get_dealers', view=views.get_dealerships, name='get_dealers'),\n    path(route='get_dealers/<str:state>', view=views.get_dealerships, name='get_dealers_by_state'),\n    path(route='dealer/<int:dealer_id>', view=views.get_dealer_details, name='dealer_details'),",
        "detail": "server.djangoapp.urls",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "def login_user(request):\n    # Get username and password from request.POST dictionary\n    data = json.loads(request.body)\n    username = data['userName']\n    password = data['password']\n    # Try to check if provide credential can be authenticated\n    user = authenticate(username=username, password=password)\n    data = {\"userName\": username}\n    if user is not None:\n        # If user is valid, call login method to login current user",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "logout_request",
        "kind": 2,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "def logout_request(request):\n      # Check if the user is authenticated\n    if request.user.is_authenticated:\n        # Log the user out\n        logout(request)\n        # Return a JSON response indicating success\n        return JsonResponse({\"status\": \"Logged out\"})\n    else:\n        # If the user is not authenticated, return a different response\n        return JsonResponse({\"status\": \"User not logged in\"}, status=400)",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "registration",
        "kind": 2,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "def registration(request):\n    context = {}\n    data = json.loads(request.body)\n    username = data['userName']\n    password = data['password']\n    firstName = data['firstName']\n    lastName = data['lastName']\n    email = data['email']\n    username_exists = False\n    email_exists = False",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "get_dealerships",
        "kind": 2,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "def get_dealerships(request, state=\"All\"):\n    if(state != \"All\"):\n        endpoint = \"/fetchDealers/\"+state\n    else:\n        endpoint = \"/fetchDealers/\"\n    dealerships = get_request(endpoint)\n    return JsonResponse({\"status\":200,\"dealers\":dealerships})\n# Create a `get_dealer_reviews` view to render the reviews of a dealer\ndef get_dealer_reviews(request, dealer_id):\n    # if dealer id has been provided",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "get_dealer_reviews",
        "kind": 2,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "def get_dealer_reviews(request, dealer_id):\n    # if dealer id has been provided\n    if(dealer_id):\n        endpoint = \"/fetchReviews/dealer/\"+str(dealer_id)\n        reviews = get_request(endpoint)\n        for review_detail in reviews:\n            response = analyze_review_sentiments(review_detail['review'])\n            print(response)\n            review_detail['sentiment'] = response['sentiment']\n        return JsonResponse({\"status\":200,\"reviews\":reviews})",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "get_dealer_details",
        "kind": 2,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "def get_dealer_details(request, dealer_id):\n    if(dealer_id):\n        endpoint = \"/fetchDealer/\"+str(dealer_id)\n        dealership = get_request(endpoint)\n        return JsonResponse({\"status\":200,\"dealer\":dealership})\n    else:\n        return JsonResponse({\"status\":400,\"message\":\"Bad Request\"})\n# Create a `add_review` view to submit a review\n# def add_review(request):\ndef add_review(request):",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "add_review",
        "kind": 2,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "def add_review(request):\n    if(request.user.is_anonymous == False):\n        data = json.loads(request.body)\n        try:\n            response = post_review(data)\n            return JsonResponse({\"status\":200})\n        except:\n            return JsonResponse({\"status\":401,\"message\":\"Error in posting review\"})\n    else:\n        return JsonResponse({\"status\":403,\"message\":\"Unauthorized\"})",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "get_cars",
        "kind": 2,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "def get_cars(request):\n    initiate()\n    car_models = CarModel.objects.select_related('car_make')\n    cars = []\n    for car_model in car_models:\n        cars.append({\"CarModel\": car_model.name, \"CarMake\": car_model.car_make.name})\n    return JsonResponse({\"CarModels\":cars})",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "server.djangoapp.views",
        "description": "server.djangoapp.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Create your views here.\n# Create a `login_request` view to handle sign in request\n@csrf_exempt\ndef login_user(request):\n    # Get username and password from request.POST dictionary\n    data = json.loads(request.body)\n    username = data['userName']\n    password = data['password']\n    # Try to check if provide credential can be authenticated",
        "detail": "server.djangoapp.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "server.djangoenv.bin.activate_this",
        "description": "server.djangoenv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "server.djangoenv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "server.djangoenv.bin.activate_this",
        "description": "server.djangoenv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "server.djangoenv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "server.djangoenv.bin.activate_this",
        "description": "server.djangoenv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.djangoenv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "server.djangoenv.bin.activate_this",
        "description": "server.djangoenv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.djangoenv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "server.djangoenv.bin.activate_this",
        "description": "server.djangoenv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.djangoenv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "server.djangoenv.bin.activate_this",
        "description": "server.djangoenv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.djangoenv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "server.djangoenv.bin.activate_this",
        "description": "server.djangoenv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.djangoenv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "server.djangoenv.bin.activate_this",
        "description": "server.djangoenv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "server.djangoenv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.djangoproj.asgi",
        "description": "server.djangoproj.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "server.djangoproj.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY =\\\n    'django-insecure-ccow$tz_=9%dxu4(0%^(z%nx32#s@(zt9$ih@)5l54yny)wm-0'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\n    'localhost','127.0.0.1','boluwajimaxw-8000.theiadockernext-0-labs-prod-theiak8s-4-tor01.proxy.cognitiveclass.ai/'",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\n    'localhost','127.0.0.1','boluwajimaxw-8000.theiadockernext-0-labs-prod-theiak8s-4-tor01.proxy.cognitiveclass.ai/'\n]\nCSRF_TRUSTED_ORIGINS = [\n    'http://localhost','https://boluwajimaxw-8000.theiadockernext-0-labs-prod-theiak8s-4-tor01.proxy.cognitiveclass.ai/'\n]\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [],\n}",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\n    'localhost','127.0.0.1','boluwajimaxw-8000.theiadockernext-0-labs-prod-theiak8s-4-tor01.proxy.cognitiveclass.ai/'\n]\nCSRF_TRUSTED_ORIGINS = [\n    'http://localhost','https://boluwajimaxw-8000.theiadockernext-0-labs-prod-theiak8s-4-tor01.proxy.cognitiveclass.ai/'\n]\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [],\n}\n# Application definition",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    'http://localhost','https://boluwajimaxw-8000.theiadockernext-0-labs-prod-theiak8s-4-tor01.proxy.cognitiveclass.ai/'\n]\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [],\n}\n# Application definition\nINSTALLED_APPS = [\n    'djangoapp.apps.DjangoappConfig',\n    'django.contrib.admin',",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [],\n}\n# Application definition\nINSTALLED_APPS = [\n    'djangoapp.apps.DjangoappConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'djangoapp.apps.DjangoappConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'djangoproj.urls'\nTEMPLATES = [",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "ROOT_URLCONF = 'djangoproj.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'frontend/static'),\n            os.path.join(BASE_DIR, 'frontend/build'),\n            os.path.join(BASE_DIR, 'frontend/build/static'),\n            ],\n        'APP_DIRS': True,",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'frontend/static'),\n            os.path.join(BASE_DIR, 'frontend/build'),\n            os.path.join(BASE_DIR, 'frontend/build/static'),\n            ],\n        'APP_DIRS': True,\n        'OPTIONS': {",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "WSGI_APPLICATION = 'djangoproj.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')\nMEDIA_URL = '/media/'",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSTATICFILES_DIRS = [\n     os.path.join(BASE_DIR, 'frontend/static'),\n     os.path.join(BASE_DIR, 'frontend/build'),",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSTATICFILES_DIRS = [\n     os.path.join(BASE_DIR, 'frontend/static'),\n     os.path.join(BASE_DIR, 'frontend/build'),\n     os.path.join(BASE_DIR, 'frontend/build/static'),",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(STATIC_ROOT, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSTATICFILES_DIRS = [\n     os.path.join(BASE_DIR, 'frontend/static'),\n     os.path.join(BASE_DIR, 'frontend/build'),\n     os.path.join(BASE_DIR, 'frontend/build/static'),\n]",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSTATICFILES_DIRS = [\n     os.path.join(BASE_DIR, 'frontend/static'),\n     os.path.join(BASE_DIR, 'frontend/build'),\n     os.path.join(BASE_DIR, 'frontend/build/static'),\n]",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSTATICFILES_DIRS = [\n     os.path.join(BASE_DIR, 'frontend/static'),\n     os.path.join(BASE_DIR, 'frontend/build'),\n     os.path.join(BASE_DIR, 'frontend/build/static'),\n]",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "server.djangoproj.settings",
        "description": "server.djangoproj.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n     os.path.join(BASE_DIR, 'frontend/static'),\n     os.path.join(BASE_DIR, 'frontend/build'),\n     os.path.join(BASE_DIR, 'frontend/build/static'),\n]",
        "detail": "server.djangoproj.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.djangoproj.urls",
        "description": "server.djangoproj.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('about/', TemplateView.as_view(template_name=\"About.html\")),\n    path('contact/', TemplateView.as_view(template_name=\"Contact.html\")),\n    path('djangoapp/', include('djangoapp.urls')),\n    path('login', TemplateView.as_view(template_name='index.html')),\n    path('register', TemplateView.as_view(template_name='index.html')),\n    path('dealers/', TemplateView.as_view(template_name=\"index.html\")),\n    path('dealer/<int:dealer_id>',TemplateView.as_view(template_name=\"index.html\")),\n    path('postreview/<int:dealer_id>',TemplateView.as_view(template_name=\"index.html\")),",
        "detail": "server.djangoproj.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.djangoproj.wsgi",
        "description": "server.djangoproj.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "server.djangoproj.wsgi",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "server.frontend.node_modules.flatted.python.flatted",
        "description": "server.frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "server.frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "server.frontend.node_modules.flatted.python.flatted",
        "description": "server.frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "server.frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "server.frontend.node_modules.flatted.python.flatted",
        "description": "server.frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "server.frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "server.frontend.node_modules.flatted.python.flatted",
        "description": "server.frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "server.frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "server.frontend.node_modules.flatted.python.test",
        "description": "server.frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "server.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server.manage",
        "description": "server.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'djangoproj.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "server.manage",
        "documentation": {}
    }
]